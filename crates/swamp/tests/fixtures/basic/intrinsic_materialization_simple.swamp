// Simplified tests for the problem intrinsic materialization when
// the primitive value is a memory location (struct field)
struct TestData {
    int_value: Int,
    float_value: Float,
}

#[test]
fn int_to_float_from_struct_field() {
    data = TestData { int_value: 42, float_value: 0.0 }
    result = data.int_value.to_float()
    assert(result == 42.0, "int to_float from struct field is wrong")
}

#[test]
fn float_abs_from_struct_field() {
    data = TestData { int_value: 0, float_value: -3.5 }
    result = data.float_value.abs()
    assert(result == 3.5, "float abs from struct field is wrong")
}

#[test]
fn int_abs_from_struct_field() {
    data = TestData { int_value: -42, float_value: 0.0 }
    result = data.int_value.abs()
    assert(result == 42, "int abs from struct field is wrong")
}

#[test]
fn int_to_float_from_variable() {
    x = 123
    result = x.to_float()
    assert(result == 123.0, "int to_float from variable is wrong")
}

#[test]
fn float_floor_from_struct() {
    data = TestData { int_value: 0, float_value: 3.9 }
    result = data.float_value.floor()
    assert(result == 3, "floor from struct is wrong")
}

#[test]
fn float_round_from_struct() {
    data = TestData { int_value: 0, float_value: 3.5 }
    result = data.float_value.round()
    assert(result == 4, "round from struct is wrong")
}

#[test]
fn int_to_string_from_struct() {
    data = TestData { int_value: 999, float_value: 0.0 }
    result = data.int_value.string()
    assert(result == "999", "int to_string from struct is wrong")
}
